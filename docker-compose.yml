# Docker Compose configuration for local development

services:
  # Main API application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    env_file: ".env"
    environment:
      - ENV_FOR_DYNACONF=development
      - API_ENV=development
      - API_DATABASE_URL=postgresql+asyncpg://api_user:api_password@postgres:5432/api_db
      - API_REDIS_URL=redis://redis:6379/0
      - API_SECRET_KEY=docker-development-secret-key-change-this-in-production
      - API_SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      # Mount source code for development (comment out for production-like testing)
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: api_db
      POSTGRES_USER: api_user
      POSTGRES_PASSWORD: api_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U api_user -d api_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Database migration service (run once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - ENV_FOR_DYNACONF=development
      - API_ENV=development
      - API_DATABASE_URL=postgresql+asyncpg://api_user:api_password@postgres:5432/api_db
      - API_REDIS_URL=redis://redis:6379/0
      - API_SECRET_KEY=docker-development-secret-key-change-this-in-production
      - DATABASE_URL=postgresql+asyncpg://api_user:api_password@postgres:5432/api_db
    volumes:
      - ./migrations:/app/migrations
      - ./alembic.ini:/app/alembic.ini
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - api-network
    command: ["python", "-m", "alembic", "upgrade", "head"]
    restart: "no"

  # Prometheus for metrics (optional, for development monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - api-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional, for development monitoring)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - api-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  api-network:
    driver: bridge
