[tool:pytest]
# Pytest configuration file
# This file configures pytest behavior and settings

# Minimum pytest version required
minversion = 6.0

# Command line options to always use
addopts = 
    # Show extra test summary info
    -ra
    # Quiet output (less verbose)
    -q
    # Strict markers - fail if unknown markers are used
    --strict-markers
    # Strict config - fail on unknown config options
    --strict-config
    # Show coverage report
    --cov=src
    # Coverage report format
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    # Fail if coverage is below threshold
    --cov-fail-under=75
    # Show slowest tests
    --durations=10
    # Capture output (show print statements on failure)
    --capture=no
    # Parallel execution (uncomment to enable)
    # -n auto

# Test discovery patterns
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Async test mode
asyncio_mode = auto

# Test markers - define custom markers here
markers =
    unit: Unit tests - test individual components in isolation
    integration: Integration tests - test component interactions
    e2e: End-to-end tests - test complete user workflows
    slow: Slow running tests (may be skipped in CI)
    fast: Fast running tests (preferred for development)
    auth: Tests requiring authentication
    database: Tests requiring database access
    api: API endpoint tests
    security: Security-related tests
    performance: Performance and load tests
    smoke: Smoke tests - basic functionality checks

# Logging configuration
log_cli = true
log_cli_level = WARNING
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture log output in test reports
log_capture = true
log_level = WARNING
log_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings
filterwarnings =
    # Ignore specific warnings that are not actionable
    ignore::DeprecationWarning:dynaconf.*
    ignore::PendingDeprecationWarning:sqlalchemy.*
    ignore::UserWarning:factory.*
    # Convert other warnings to errors to catch issues early
    error::UserWarning
    error::RuntimeWarning

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# JUnit XML output for CI/CD integration
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = false

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */.venv/*
    */migrations/*
    */alembic/*
    */__pycache__/*
    */site-packages/*

[coverage:report]
# Exclude lines from coverage
exclude_lines =
    # Standard exclusions
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    # Type checking exclusions
    if TYPE_CHECKING:
    @overload
    # Abstract methods
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    # Defensive assertions
    assert False
    raise AssertionError

# Show missing lines in coverage report
show_missing = true
# Skip files that are fully covered
skip_covered = false
# Precision for coverage percentages
precision = 2

[coverage:html]
directory = htmlcov
title = API Framework Test Coverage

[coverage:xml]
output = coverage.xml